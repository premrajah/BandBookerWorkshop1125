@using Microsoft.AspNetCore.Components.Web
@using Data
@using BandBookerData.Models
@using System.IO;
@using Blazor.FileReader;
@inject IFileReaderService fileReaderService;
@inject IJSRuntime js;


@if (@Musician != null && @ShowMusicianPanel == true)
{
    <div style="background-color:lightgray;">
        <div style="padding:1vw;">
            <EditForm Model="@Musician" OnValidSubmit="@SubmitButtonPressed">
                <DataAnnotationsValidator />
                <ValidationSummary />

                Name:
                <InstantInputText @bind-Value="@Musician.Name" id="musician.name"  type="text" style="width:100%;" />
                <br /><br />

                Email:
                <InstantInputText @bind-Value="@Musician.Email" type="text" style="width:100%;" />
                <br /><br />

                Mobile Phone:
                <InstantInputText @bind-Value="@Musician.MobilePhone" type="text" style="width:100%;" />
                <br /><br />

                Bio:
                <textarea id="BioControl" @bind="@Musician.Bio" @onkeyup="SyncMusicianBio" rows="4" style="width: 100%; overflow: hidden; overflow-wrap: break-word; overflow-y: scroll; " />
                <br />

                
                <ObjectPicker ItemType="Instrument"
                              ItemTypePlural="Instruments"
                              TextPropertyName="Name"
                              ValuePropertyName="InstrumentId"
                              AllItems="@AllInstruments"
                              SelectedItems="@SelectedInstruments">
                </ObjectPicker>

                <br />
                Photo:
                <br />
                <input type="file" @ref=inputTypeFileElement />
                <button class="btn btn-primary" type="button" @onclick=ReadFile>Upload</button>
                <br />
                @if (@Musician.PhotoUrl != "")
                {
                    <img src="@Musician.PhotoUrl" />
                }
                <br /><br />
                <button class="btn btn-secondary" type="submit">@SubmitButtonText</button>
                <span>&nbsp;</span>
                <button class="btn btn-warning" type="button" @onclick="CancelButtonPressed">Cancel</button>
            </EditForm>

        </div>
    </div>
}


@code {


    private List<Instrument> AllInstruments { get; set; }


    [Parameter]
    public EventCallback<string> CancelPressed { get; set; }


    [Parameter]
    public EventCallback<Musician> MusicianAdded { get; set; }


    [Parameter]
    public EventCallback<Musician> MusicianUpdated { get; set; }

    [Parameter]
    public EventCallback<string> BioUpdated { get; set; }


    Musician Musician { get; set; } = new Musician();
    bool ShowMusicianPanel = false;
    ElementReference inputTypeFileElement;
    bool Adding = false;
    string SubmitButtonText = "";


    private List<Instrument> SelectedInstruments { get; set; } = new List<Instrument>(); // for generic component 


    public void UpdateMusicianBio(int MusicianId, string Bio)
    {
        if (Musician != null && Musician.MusicianId == MusicianId)
        {
            Musician.Bio = Bio;
            StateHasChanged();
        }
    }


    public void Hide()
    {
        ShowMusicianPanel = false;
    }


    public async Task ReadFile()
    {
        string filename = "wwwroot/images/";


        foreach (var file in await
         fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            // Read into buffer and act (uses less memory)
            using (Stream stream = await file.OpenReadAsync())
            {
                var buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);


                var info = await file.ReadFileInfoAsync();
                var extension = Path.GetExtension(filename + info.Name);
                var name = $@"{Guid.NewGuid()}" + extension;
                filename += name;


                using (Stream outfile = System.IO.File.OpenWrite(filename))
                {
                    outfile.Write(buffer, 0, buffer.Length);
                }
                ImageResizer.ResizeAndSaveImage(filename, 200);
                Musician.PhotoUrl = "/images/" + name;
            }
        }
    }


    void AddAllInstruments()
    {
        foreach (Instrument instrument in AllInstruments)
        {
            if ((from x in Musician.MusicianInstrument
                 where x.Instrument.Name == instrument.Name
                 select x).FirstOrDefault() == null)
            {
                var mi = new MusicianInstrument()
                {
                    Musician = this.Musician,
                    Instrument = instrument
                };
                Musician.MusicianInstrument.Add(mi);
            }
        }
    }


    void RemoveAllInstruments()
    {
        foreach (MusicianInstrument mi in Musician.MusicianInstrument.ToArray())
        {
            Musician.MusicianInstrument.Remove(mi);
        }
    }

    async Task SyncMusicianBio(KeyboardEventArgs e)
    {
        try
        {
            var value = await js.InvokeAsync<string>("GetInputValue", "BioControl");
            await BioUpdated.InvokeAsync(value);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    public async Task NewMusician(List<Instrument> Instruments)
    {
        this.Musician = new Musician();
        AllInstruments = Instruments;
        SelectedInstruments = new List<Instrument>();
        Adding = true;
        SubmitButtonText = "Add";
        ShowMusicianPanel = true;
        await js.InvokeVoidAsync("SetFocus", "musician.name");
    }


    public async Task EditMusician(List<Instrument> Instruments, Musician Musician)
    {
        AllInstruments = Instruments;
        SelectedInstruments = new List<Instrument>();
        foreach (var mi in Musician.MusicianInstrument)
        {
            SelectedInstruments.Add(mi.Instrument);
        }
        Adding = false;
        SubmitButtonText = "Update";
        this.Musician = Musician;
        ShowMusicianPanel = true;
        await js.InvokeVoidAsync("SetFocus", "musician.name");
    }


    async Task SubmitButtonPressed()
    {
        // Clear musician's instruments and add the selected instruments
        this.Musician.MusicianInstrument.Clear();
        foreach (var instrument in SelectedInstruments)
        {
            this.Musician.MusicianInstrument.Add(
              new MusicianInstrument
              {
                  Instrument = instrument,
                  InstrumentId = instrument.InstrumentId,
                  Musician = this.Musician,
                  MusicianId = this.Musician.MusicianId
              });
        }


        if (Adding)
        {
            await MusicianAdded.InvokeAsync(this.Musician);
        }
        else
        {
            await MusicianUpdated.InvokeAsync(this.Musician);
        }
    }


    async Task CancelButtonPressed()
    {
        ShowMusicianPanel = false;
        await CancelPressed.InvokeAsync("");
    }
}