@page "/"
@using BandBookerData;
@using BandBooker.Data;
@using BandBookerData.Models;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.SignalR.Client;


<h2>Instruments</h2>
<select @onchange="InstrumentSelected"
            size="10" style="width:100%;"
            disabled="@DisableInstrumentList">
    @foreach (var instrument in AllInstruments)
    {
        @if (SelectedInstrument != null
&& instrument.InstrumentId == SelectedInstrument.InstrumentId)
        {
            <option selected value="@instrument.InstrumentId.ToString()">
                @instrument.Name
            </option>
        }
        else
        {
            <option value="@instrument.InstrumentId.ToString()">@instrument.Name</option>
        }
    }
</select>
<br />

<button class="btn btn-primary" disabled="@DisableInstrumentList" @onclick="NewInstrumentButtonClick">New</button>
<span>&nbsp;</span>


<button class="btn btn-secondary" disabled="@DisableInstrumentEditButton" @onclick="EditInstrumentButtonClick">Edit</button>
<span>&nbsp;</span>


<button class="btn btn-danger" disabled="@DisableInstrumentEditButton" @onclick="DeleteInstrumentButtonClick">Delete</button>
<span>&nbsp;</span>


<br />
<span class="text-danger">@InstrumentErrorMessage</span>


<InstrumentEditor @ref="instrumentEditor"
                           Instrument="SelectedInstrument"
                           CancelPressed="InstrumentCancelled"
                           InstrumentAdded="InstrumentAdded"
                           InstrumentUpdated="InstrumentUpdated">
</InstrumentEditor>
<br />
<br />

<h2>Musicians</h2>
<select @onchange="MusicianSelected" size="10" style="width:100%;" disabled="@DisableMusicianControls">
    @foreach (var musician in DataManager.Musicians)
    {
        if (SelectedMusician != null
         && musician.MusicianId == SelectedMusician.MusicianId)
        {
            <option selected value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
        else
        {
            <option value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
    }
</select>
<br />


<button class="btn btn-primary" disabled="@DisableMusicianControls" @onclick="NewMusicianButtonClick"> New </button>
<button class="btn btn-secondary" disabled="@DisableMusicianEditButton" @onclick="EditMusicianButtonClick"> Edit</button>
<button class="btn btn-danger" disabled="@DisableMusicianEditButton" @onclick="DeleteMusicianButtonClick"> Delete</button>
<br />


<span class="text-danger">@MusicianErrorMessage</span>
<MusicianEditor @ref="musicianEditor"  
                CancelPressed="EditMusicianCancelled"
                MusicianAdded="MusicianAdded"
                MusicianUpdated="MusicianUpdated"
                BioUpdated="MusicianBioUpdated" />
<br />
<br />


@code {


    protected override async Task OnInitializedAsync()
    {
        AllInstruments = await ApiService.GetInstruments();

        connection = new Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder()
            .WithUrl("https://localhost:44367/adminHub")
            .Build();

        connection.On<int, string>("ReceiveSyncMusicianBio", this.OnReceiveSyncMusicianBio);

        try
        {
            await connection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    #region Instruments
    bool DisableInstrumentList = false;
    bool DisableInstrumentEditButton = true;
    string InstrumentErrorMessage = "";
    Instrument SelectedInstrument;
    List<Instrument> AllInstruments = new List<Instrument>();
    InstrumentEditor instrumentEditor;


    void InstrumentCancelled(string message)
    {
        if (SelectedInstrument != null)
        {
            SelectedInstrument =
               (from x in DataManager.Instruments
                where x.InstrumentId == SelectedInstrument.InstrumentId
                select x).FirstOrDefault();
        }
        InstrumentErrorMessage = message;
        DisableInstrumentList = false;
        DisableInstrumentEditButton = (SelectedInstrument == null);
    }


    void InstrumentAdded(Instrument instrument)
    {
        DataManager.AddInstrument(instrument);
        DisableInstrumentList = false;
        DisableInstrumentEditButton = (SelectedInstrument == null);
        AllInstruments = DataManager.Instruments;
        SelectedInstrument = AllInstruments.Last();
        instrumentEditor.Hide();
    }


    void InstrumentUpdated(string message)
    {
        SelectedInstrument = DataManager.UpdateInstrument(SelectedInstrument);


        AllInstruments[AllInstruments.FindIndex(
            x => x.InstrumentId == SelectedInstrument.InstrumentId)]
            = SelectedInstrument;


        DisableInstrumentList = false;
        DisableInstrumentEditButton = false;
        instrumentEditor.Hide();
    }

    void InstrumentSelected(ChangeEventArgs args)
    {
        InstrumentErrorMessage = "";
        string instrumentId = args.Value.ToString();
        SelectedInstrument =
           (from x in DataManager.Instruments
            where x.InstrumentId.ToString() == instrumentId.ToString()
            select x).First();
        if (SelectedInstrument != null)
            DisableInstrumentEditButton = false;
        else
            DisableInstrumentEditButton = true;
    }


    async Task NewInstrumentButtonClick()
    {
        InstrumentErrorMessage = "";
        DisableInstrumentList = true;
        DisableInstrumentEditButton = true;
        SelectedInstrument = new Instrument();
        await instrumentEditor.NewInstrument();
    }


    async Task EditInstrumentButtonClick()
    {
        DisableInstrumentList = true;
        DisableInstrumentEditButton = true;
        await instrumentEditor.EditInstrument();
    }


    void DeleteInstrumentButtonClick()
    {
        if (SelectedInstrument != null)
        {
            InstrumentErrorMessage = DataManager.DeleteInstrument(SelectedInstrument);
            if (InstrumentErrorMessage == "")
            {
                AllInstruments.Remove((from x in AllInstruments
                                       where x.InstrumentId
                                       == SelectedInstrument.InstrumentId
                                       select x).First());
                if (AllInstruments.Count > 0)
                {
                    SelectedInstrument = AllInstruments.First();
                }
            }
        }
    }
    #endregion

    #region Musicians

    string MusicianErrorMessage = "";
    Musician SelectedMusician;
    MusicianEditor musicianEditor;
    bool DisableMusicianControls = false;
    bool DisableMusicianEditButton = true;

    HubConnection connection; // signalR

    void OnReceiveSyncMusicianBio(int MusicianId, string Bio)
    {
        var musician = (from x in DataManager.Musicians
                        where x.MusicianId == MusicianId
                        select x).FirstOrDefault();


        if (musician != null)
        {
            musicianEditor.UpdateMusicianBio(MusicianId, Bio);
        }
    }


    async Task MusicianBioUpdated(string bio)
    {
        if (SelectedMusician != null)
        {
            await connection.InvokeAsync("SyncMusicianBio",
                 SelectedMusician.MusicianId, bio);
        }
    }


    void EditMusicianCancelled(string message)
    {
        if (SelectedMusician != null)
        {
            SelectedMusician =
               (from x in DataManager.Musicians
                where x.MusicianId == SelectedMusician.MusicianId
                select x).FirstOrDefault();


        }
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
    }


    void MusicianAdded(Musician Musician)
    {
        DataManager.AddMusician(Musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
        musicianEditor.Hide();
        MusicianErrorMessage = "";
    }


    void MusicianUpdated(Musician musician)
    {
        SelectedMusician = DataManager.UpdateMusician(musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = false;
        musicianEditor.Hide();
    }


    void MusicianSelected(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        SelectMusicianById(Convert.ToInt32(args.Value));
    }


    void SelectMusicianById(int Id)
    {
        MusicianErrorMessage = "";


        SelectedMusician =
           (from x in DataManager.Musicians
            where x.MusicianId.ToString() == Id.ToString()
            select x).FirstOrDefault();


        if (SelectedMusician != null)
        {
            DisableMusicianEditButton = false;
        }
        else
            DisableMusicianEditButton = true;
    }


    async Task NewMusicianButtonClick()
    {
        MusicianErrorMessage = "";
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.NewMusician(DataManager.Instruments);
    }


    async Task EditMusicianButtonClick()
    {
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.EditMusician(DataManager.Instruments,
          SelectedMusician);
    }


    void DeleteMusicianButtonClick()
    {
        if (SelectedMusician != null)
        {
            MusicianErrorMessage =
              DataManager.DeleteMusician(SelectedMusician, false);
            if (DataManager.Musicians.Count == 1)
            {
                SelectedMusician = DataManager.Musicians.First();
            }
        }
    }


    #endregion
}